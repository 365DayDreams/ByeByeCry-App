def localProperties = new Properties()
def keystoreProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')

if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '3'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0.3'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion 33
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.byebyecry.app"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion 24

        targetSdkVersion 33

        targetSdkVersion flutter.targetSdkVersion

        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }
    signingConfigs{
        release{
            keyAlias 'upload'
            keyPassword 'byebyecry123'
            storeFile file('upload-keystore.jks')
            storePassword 'byebyecry123'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
    }
//    signingConfigs {
//        release {
//
//
///*            keyAlias keystoreProperties['keyAlias']
//
//            keyAlias "byebyebabycry"
//            keyPassword "@ByeByeCry@Key"
//            storeFile file('byebabycry.jks')
//            storePassword "@ByeByeCry@Key"
//
// /*           keyAlias keystoreProperties['keyAlias']
//
// keyPassword keystoreProperties['keyPassword']
// storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
// storePassword keystoreProperties['storePassword']*/
//
///*            keyAlias "byebyebabycry"
//keyPassword "@ByeByeCry@Key"
//storeFile file('byebabycry.jks')
//storePassword "@ByeByeCry@Key"*/
//
//            keyAlias "byebabycry"
//            keyPassword "@ByeByeCry@Key"
//            storeFile file('byebabycry.jks')
//            storePassword "@ByeByeCry@Key"
//
//        }
////        debug {
////            keyAlias "byebyebabycry"
////            keyPassword "@ByeByeCry@Key"
////            storeFile file('byebabycry.jks')
////            storePassword "@ByeByeCry@Key"
////
////
////
////           /* keyAlias keystoreProperties['keyAlias']
////            keyPassword keystoreProperties['keyPassword']
////            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
////            storePassword keystoreProperties['storePassword']*/
////
////            /* keyAlias keystoreProperties['keyAlias']
////             keyPassword keystoreProperties['keyPassword']
////             storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
////             storePassword keystoreProperties['storePassword']*/
////
////           /* keyAlias keystoreProperties['keyAlias']
////            keyPassword keystoreProperties['keyPassword']
////            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
////            storePassword keystoreProperties['storePassword']*/
////        }
//    }
//    buildTypes {
//        release {
//            signingConfig signingConfigs.release
//        }
////        debug {
////            signingConfig signingConfigs.debug
////        }
//    }

    /*buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }*/
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.billingclient:billing:3.0.2'
}
